define endian=little;
define alignment=1;

define space ram      type=ram_space      size=4  default;
define space register type=register_space size=4;

# General-purpose registers
define register offset=0x00 size=4
    [r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 sp r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31];
@define r14 "sp"

#define register offset=0x00 size=4
#   [a0 a1 a2 a3 l0 l1 l2 l3 l4 l5 l6 l7 t0 t1 sp lr l8 l9 t2 t3 t4 t5 t6 t7 t8 t9 _ _ rdb rtb svbr tls];

# Accumulator registers
define register offset=0x100 size=4 [hi lo];

# Control registers
define register offset=0x200 size=4
    [cr0 cr1 cr2 cr3 cr4 cr5 cr6 cr7 cr8 cr9 cr10 cr11 cr12 cr13 cr14 cr15 cr16 cr17 cr18 cr19 cr20 cr21 cr22 cr23 cr24 cr25 cr26 cr27 cr28 cr29 cr30 cr31];

define bitrange psr_cf=cr0[31,1];
@define PSR   "cr0"    # Processor Status Register
@define VBR   "cr1"    # Vector Base Register
@define EPSR  "cr2"    # Shadow Exception PSR
@define FPSR  "cr3"    # Shadow Fast Interrupt PSR
@define EPC   "cr4"    # Shadow Exception Program Counter
@define FPC   "cr5"    # Shadow Fast Interrupt PC
@define SS0   "cr6"    # Supervisor Scratch Register
@define SS1   "cr7"    # Supervisor Scratch Register
@define SS2   "cr8"    # Supervisor Scratch Register
@define SS3   "cr9"    # Supervisor Scratch Register
@define SS4   "cr10"   # Supervisor Scratch Register
@define GCR   "cr11"   # Global Control Register
@define GSR   "cr12"   # Global Status Register
@define CPIDR "cr13"   # Product ID Register
@define DCSR  "cr14"
@define CPWR  "cr15"
@define CFR   "cr17"   # Cache Flush Register
@define CCR   "cr18"   # Cache Config Register
@define CAPR  "cr19"   # Cachable and Access Popedom Register(MGU processor only)
@define PACR  "cr20"   # Protected Area Config Register(MGU processor only)
@define PRSR  "cr21"   # Protected Area Select Register(MGU processor only)
@define MPID  "cr30"
@define CHR   "cr31"

# Alternative registers
define register offset=0x300 size=4
    [r0a r1a r2a r3a r4a r5a r6a r7a r8a r9a r10a r11a r12a r13a r14a r15a r14_spv];
@define sp_spv "r14_spv"

# Floating point v2 registers
define register offset=0x400 size=4
    [vr0 vr1 vr2 vr3 vr4 vr5 vr6 vr7 vr8 vr9 vr10 vr11 vr12 vr13 vr14 vr15];

# Program Counter
define register offset=0x2000 size=4 [pc];

define pcodeop stub;

macro push(x){
    sp = sp - 4;
    *:4 sp = x;
}
macro pop(x){
    x = *:4 sp;
    sp = sp + 4;
}
