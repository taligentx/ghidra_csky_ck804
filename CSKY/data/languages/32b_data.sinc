:abs i32_r_rz, i32_r_rx is i32_op = 0b0001 & i32_r_imm5 = 0b00000 & i32_r_sop = 0b00000 & i32_r_pcode = 0b10000 & i32_r_rx & i32_r_rz {
    if (i32_r_rx s< 0) goto <then>;
    i32_r_rz = i32_r_rx;
    goto <end>;
    <then>
    i32_r_rz = ~(i32_r_rx) + 1;
    <end>
}

# add-substract Part
:addu i32_r_rz, i32_r_rx, i32_r_ry is i32_op = 0b0001 & i32_r_sop = 0b000000 & i32_r_pcode = 0b00001 & i32_r_ry & i32_r_rx & i32_r_rz {
    i32_r_rz = zext( i32_r_rx + i32_r_ry );
}
:addc i32_r_rz, i32_r_rx, i32_r_ry is i32_op = 0b0001 & i32_r_sop = 0b000000 & i32_r_pcode = 0b00010 & i32_r_ry & i32_r_rx & i32_r_rz {
    local tmp:4 = psr_cf;
    psr_cf = carry(i32_r_rx, i32_r_ry) || ( i32_r_rx + i32_r_ry == 0xFFFFFFFF && tmp == 1 );
    i32_r_rz = zext( i32_r_rx + i32_r_ry + tmp );
}
# addi instruction ----1
:addi i32_imm12_rz, i32_imm12_rx, oimm is i32_op = 0b1001 & i32_imm12_sop = 0b0000 & i32_imm12_rz & i32_imm12_rx & i32_imm12_imm [oimm = (i32_imm12_imm+1);] {
    i32_imm12_rz = zext( i32_imm12_rx + oimm:4 );
}
# addi instruction ----2
:addi i32_imm18_rz, r28, i32_imm18_imm_A1 is i32_op = 0b0011 & i32_imm18_sop = 0b111 & i32_imm18_rz & i32_imm18_imm_A1 & r28 {
    i32_imm18_rz = zext( r28 + i32_imm18_imm_A1 );
}

:subu i32_r_rz, i32_r_rx, i32_r_ry is i32_op = 0b0001 & i32_r_sop = 0b000000 & i32_r_pcode = 0b00100 & i32_r_rz & i32_r_rx & i32_r_ry {
    i32_r_rz = zext( i32_r_rx - i32_r_ry );
}
:subc i32_r_rz, i32_r_rx, i32_r_ry is i32_op = 0b0001 & i32_r_sop = 0b000000 & i32_r_pcode = 0b01000 & i32_r_rz & i32_r_rx & i32_r_ry {
    local tmp:4 = psr_cf;
    psr_cf = (i32_r_rx >= i32_r_ry) && ( tmp != 0b0 || i32_r_rx != i32_r_ry );
    i32_r_rz = zext( i32_r_rx - i32_r_ry - (tmp ^ 1) );
}
:subi i32_imm12_rz, i32_imm12_rx, oimm is i32_op = 0b1001 & i32_imm12_sop = 0b0001 & i32_imm12_rz & i32_imm12_rx & i32_imm12_imm [oimm = (i32_imm12_imm+1);] {
    i32_imm12_rz = zext( i32_imm12_rx - oimm);
}

# index
with : i32_op = 0b0001 & i32_r_sop = 0b000010 {
    :ixh i32_r_rz, i32_r_rx, i32_r_ry is i32_r_pcode = 0b00001 & i32_r_rz & i32_r_rx & i32_r_ry {
        i32_r_rz = zext( i32_r_rx + (i32_r_ry<<1));
    }
    :ixw i32_r_rz, i32_r_rx, i32_r_ry is i32_r_pcode = 0b00010 & i32_r_rz & i32_r_rx & i32_r_ry {
        i32_r_rz = zext( i32_r_rx + (i32_r_ry<<2));
    }
    :ixd i32_r_rz, i32_r_rx, i32_r_ry is i32_r_pcode = 0b00100 & i32_r_rz & i32_r_rx & i32_r_ry {
        i32_r_rz = zext( i32_r_rx + (i32_r_ry<<3));
    }
}

# incf/inct/decf/dect two registers second format rz is ry(21,25)
with : i32_op = 0b0001 & i32_r_sop = 0b000011 {
    :incf i32_r_ry, i32_r_rx, i32_bit_0004 is i32_r_pcode = 0b00001 & i32_r_ry & i32_r_rx & i32_bit_0004 {
        if(psr_cf) goto <end>;
        i32_r_ry = i32_r_rx + zext( i32_bit_0004:1 );
        <end>
    }
    :inct i32_r_ry, i32_r_rx, i32_bit_0004 is i32_r_pcode = 0b00010 & i32_r_ry & i32_r_rx & i32_bit_0004 {
        if(!psr_cf) goto <end>;
        i32_r_ry = i32_r_rx + zext( i32_bit_0004:1 );
        <end>
    }
    :decf i32_r_ry, i32_r_rx, i32_bit_0004 is i32_r_pcode = 0b00100 & i32_r_ry & i32_r_rx & i32_bit_0004 {
        if(psr_cf) goto <end>;
        i32_r_ry = i32_r_rx - zext( i32_bit_0004:1 );
        <end>
    }
    :dect i32_r_ry, i32_r_rx, i32_bit_0004 is i32_r_pcode = 0b01000 & i32_r_ry & i32_r_rx & i32_bit_0004 {
        if(!psr_cf) goto <end>;
        i32_r_ry = i32_r_rx - zext( i32_bit_0004:1 );
        <end>
    }
}

# data transfer Part
:mov i32_r_rz, i32_r_rx is i32_op = 0b0001 & i32_r_sop = 0b010010 & i32_r_pcode = 0b00001 & i32_r_imm5 = 0b00000 & i32_r_rx & i32_r_rz {
    i32_r_rz = i32_r_rx;
}
# movf ry is rz; rz is 0
:movf i32_r_ry, i32_r_rx is i32_op = 0b0001 & i32_r_sop = 0b000011 & i32_r_pcode = 0b00001 & i32_bit_0004 = 0b00000 & i32_r_ry & i32_r_rx{
    if(psr_cf) goto <end>;
    i32_r_ry = i32_r_rx;
    <end>
}
:movt i32_r_ry, i32_r_rx is i32_op = 0b0001 & i32_r_sop = 0b000011 & i32_r_pcode = 0b00010 & i32_bit_0004 = 0b00000 & i32_r_ry & i32_r_rx{
    if(!psr_cf) goto <end>;
    i32_r_ry = i32_r_rx;
    <end>
}
# movi second format single register imm16 (16,20) is rz
:movi i32_imm16_rx, i32_imm16_imm is i32_op = 0b1010 & i32_imm16_sop = 0b10000 & i32_imm16_rx & i32_imm16_imm {
    i32_imm16_rx = zext( i32_imm16_imm:2 );
}
:movih i32_imm16_rx, i32_imm16_imm is i32_op = 0b1010 & i32_imm16_sop = 0b10001 & i32_imm16_rx & i32_imm16_imm {
    i32_imm16_rx = zext( i32_imm16_imm:2 << 16 );
}
:mvc i32_r_rz is i32_op = 0b0001 & i32_bit_2125 = 0b00000 & i32_bit_1620 = 0b00000 & i32_bit_1015 = 0b000001 & i32_bit_0509 = 0b01000 & i32_r_rz {
    i32_r_rz = zext(psr_cf);
}
:mvcv i32_r_rz is i32_op = 0b0001 & i32_bit_2125 = 0b00000 & i32_bit_1620 = 0b00000 & i32_bit_1015 = 0b000001 & i32_bit_0509 = 0b10000 & i32_r_rz {
    i32_r_rz = zext(psr_cf ^ 1);
}

# lrw same as above
:lrw i32_imm16_rx, label is i32_op = 0b1010 & i32_imm16_sop = 0b10100 & i32_imm16_rx & i32_imm16_imm [label = ((i32_imm16_imm<<2) + inst_start) & 0xfffffffc;] {
    local tmp:4 = ((i32_imm16_imm<<2) + inst_start) & 0xfffffffc;
    i32_imm16_rx = *:4 tmp;
}
# grs
:grs i32_imm18_rz, i32_imm18_immSPD_O1 is i32_op = 0b0011 & i32_imm18_sop = 0b011 & i32_imm18_rz & i32_imm18_immSPD_O1 {
    i32_imm18_rz = zext(i32_imm18_immSPD_O1);
}
# read transfer
with : i32_op = 0b0001 {
    with : i32_r_sop = 0b100111 {
        :mfhi i32_r_rz is i32_r_pcode = 0b00001 & i32_r_rx = 0b00000 & i32_r_ry = 0b00000 & i32_r_rz {
            i32_r_rz = hi;
        }
        :mflo i32_r_rz is i32_r_pcode = 0b00100 & i32_r_rx = 0b00000 & i32_r_ry = 0b00000 & i32_r_rz {
            i32_r_rz = lo;
        }
    }
    # for mfhis/mflos: saturation and guard bit in processor manual ??
}

# logical operation Part
with : i32_op = 0b0001 {
    with : i32_r_sop = 0b001000 {
        :and i32_r_rz, i32_r_rx, i32_r_ry is i32_r_pcode = 0b00001 & i32_r_rz & i32_r_rx & i32_r_ry {
            i32_r_rz = i32_r_rx & i32_r_ry;
        }
        :andn i32_r_rz, i32_r_rx, i32_r_ry is i32_r_pcode = 0b00010 & i32_r_rz & i32_r_rx & i32_r_ry {
            local tmp:4 = i32_r_rx & i32_r_ry;
            i32_r_rz =- zext( ~tmp );
        }
    }
    with : i32_r_sop = 0b001001 {
        :or i32_r_rz, i32_r_rx, i32_r_ry is i32_r_pcode = 0b00001 & i32_r_rz & i32_r_rx & i32_r_ry {
            i32_r_rz = i32_r_rx | i32_r_ry;
        }
        :xor i32_r_rz, i32_r_rx, i32_r_ry is i32_r_pcode = 0b00010 & i32_r_rz & i32_r_rx & i32_r_ry {
            i32_r_rz = i32_r_rx ^ i32_r_ry;
        }
        :nor i32_r_rz, i32_r_rx, i32_r_ry is i32_r_pcode = 0b00100 & i32_r_rz & i32_r_rx & i32_r_ry {
            local tmp:4 = i32_r_rx | i32_r_ry;
            i32_r_rz = ~tmp;
        }
        :not i32_r_rz, i32_r_rx is i32_r_pcode = 0b00100 & i32_r_rz & i32_r_rx & i32_r_rx = i32_r_ry {
            i32_r_rz = ~i32_r_rx;
        }
    }
}
with : i32_op = 0b1001 {
    :andi i32_imm12_rz, i32_imm12_rx, i32_imm12_imm is i32_imm12_sop = 0b0010 & i32_imm12_rz & i32_imm12_rx & i32_imm12_imm {
        local tmp:4 = i32_imm12_rx & zext(i32_imm12_imm:2);
        i32_imm12_rz = tmp;
    }
    :andni i32_imm12_rz, i32_imm12_rx, i32_imm12_imm is i32_imm12_sop = 0b0011 & i32_imm12_rz & i32_imm12_rx & i32_imm12_imm {
        local tmp:4 = i32_imm12_rx & ~zext(i32_imm12_imm:2);
        i32_imm12_rz = tmp;
    }
    :xori i32_imm12_rz, i32_imm12_rx, i32_imm12_imm is i32_imm12_sop = 0b0100 & i32_imm12_rz & i32_imm12_rx & i32_imm12_imm {
        local tmp:4 = i32_imm12_rx ^ zext(i32_imm12_imm:2);
        i32_imm12_rz = tmp;
    }
}
:ori i32_imm16_rz, i32_imm16_rx, i32_imm16_imm is i32_op = 0b1011 & i32_imm16_rz & i32_imm16_rx & i32_imm16_imm {
    i32_imm16_rz = i32_imm16_rx | zext(i32_imm16_imm:2);
}


# shift Part
with : i32_op = 0b0001 {
    with : i32_r_sop = 0b010000 {
        :lsl i32_r_rz, i32_r_rx, i32_r_ry is i32_r_pcode = 0b00001 & i32_r_ry & i32_r_rx & i32_r_rz {
            local tmp:4 = i32_r_ry & 0x3f;
            i32_r_rz = zext( i32_r_rx << tmp );
        }
        :lsr i32_r_rz, i32_r_rx, i32_r_ry is i32_r_pcode = 0b00010 & i32_r_ry & i32_r_rx & i32_r_rz {
            local tmp:4 = i32_r_ry & 0x3f;
            i32_r_rz = zext( i32_r_rx >> tmp );
        }
        :asr i32_r_rz, i32_r_rx, i32_r_ry is i32_r_pcode = 0b00100 & i32_r_rz & i32_r_rx & i32_r_ry {
            local tmp:4 = i32_r_ry & 0x3f;
            i32_r_rz = i32_r_rx s>> tmp;
        }
        :rotl i32_r_rz, i32_r_rx, i32_r_ry is i32_r_pcode = 0b01000 & i32_r_rz & i32_r_rx & i32_r_ry {
            local tmp:4 = i32_r_ry & 0x3f;
            i32_r_rz = zext((i32_r_rx << tmp) | (i32_r_rx>>(32-tmp)));
        }
    }
    # lsli/lsri/asri/rotli i32_r_imm5 should in [1-31]
    with : i32_r_sop = 0b010010 {
        :lsli i32_r_rz, i32_r_rx, i32_r_imm5 is i32_r_pcode = 0b00001 & i32_r_rz & i32_r_rx & i32_r_imm5 {
            i32_r_rz = zext( i32_r_rx << i32_r_imm5);
        }
        :lsri i32_r_rz, i32_r_rx, i32_r_imm5 is i32_r_pcode = 0b00010 & i32_r_rz & i32_r_rx & i32_r_imm5 {
            i32_r_rz = zext( i32_r_rx >> i32_r_imm5);
        }
        :asri i32_r_rz, i32_r_rx, i32_r_imm5 is i32_r_pcode = 0b00100 & i32_r_rz & i32_r_rx & i32_r_imm5 {
            i32_r_rz = i32_r_rx s>> i32_r_imm5;
        }
        :rotli i32_r_rz, i32_r_rx, i32_r_imm5 is i32_r_pcode = 0b01000 & i32_r_rz & i32_r_rx & i32_r_imm5 {
            i32_r_rz = zext((i32_r_rx << i32_r_imm5)|(i32_r_rx >> 32-i32_r_imm5));
        }
    }
    with : i32_r_sop = 0b010011 {
        :lslc i32_r_rz, i32_r_rx, oimm5 is i32_r_pcode = 0b00001 & i32_r_rz & i32_r_rx & i32_r_imm5 [oimm5 = i32_r_imm5+1;] {
            i32_r_rz = i32_r_rx << oimm5;
            local tmp = i32_r_rx & (1<<(32-oimm5));
            psr_cf = (tmp!=0);
        }
        :lsrc i32_r_rz, i32_r_rx, oimm5 is i32_r_pcode = 0b00010 & i32_r_rz & i32_r_rx & i32_r_imm5 [oimm5 = i32_r_imm5+1;] {
            i32_r_rz = i32_r_rx >> oimm5;
            local tmp = i32_r_rx & (1<<(oimm5-1));
            psr_cf = (tmp!=0);
        }
        :asrc i32_r_rz, i32_r_rx, oimm5 is i32_r_pcode = 0b00100 & i32_r_rz & i32_r_rx & i32_r_imm5 [oimm5 = i32_r_imm5+1;] {
            i32_r_rz = i32_r_rx s>> oimm5;
            local tmp = i32_r_rx & (1<<(oimm5-1));
            psr_cf = (tmp!=0);
        }
    }
}

# bit operation Part
with : i32_op = 0b0001 & i32_r_sop = 0b001010 {
    :bclri i32_r_rz, i32_r_rx, i32_r_imm5 is i32_r_pcode = 0b00001 & i32_r_rz & i32_r_rx & i32_r_imm5 {
        local tmp:4 = 1<<i32_r_imm5;
        i32_r_rz = i32_r_rx & ~tmp;
    }
    :bseti i32_r_rz, i32_r_rx, i32_r_imm5 is i32_r_pcode = 0b00010 & i32_r_rz & i32_r_rx & i32_r_imm5 {
        local tmp:4 = 1<<i32_r_imm5;
        i32_r_rz = i32_r_rx | tmp;
    }
    :btsti i32_r_rx, i32_r_imm5 is i32_r_pcode = 0b00100 & i32_bit_0004 = 0b00000 & i32_r_rx & i32_r_imm5 {
        local tmp:4 = i32_r_rx & (1<<i32_r_imm5);
        psr_cf = (tmp!=0);
    }
}

# extract and insert Part
# msb(pcode) should not less than lsb(imm5) zextb/zexth is pseudo instruction in certain situation
:zext i32_r_rz, i32_r_rx, i32_r_pcode, i32_r_imm5 is i32_op = 0b0001 & i32_r_sop = 0b010101 & i32_r_rz & i32_r_rx & i32_r_pcode & i32_r_imm5 & i32_ext {
    i32_r_rz = zext( ( i32_r_rx >> i32_r_pcode ) & 1 );
}
:zext i32_r_rz, i32_r_rx, i32_r_pcode, i32_r_imm5 is i32_op = 0b0001 & i32_r_sop = 0b010101 & i32_r_rz & i32_r_rx & i32_r_pcode & i32_r_imm5 {
    local upper_mask:4 = ( 1 << i32_r_pcode ) - 1;
    i32_r_rz = zext( ( i32_r_rx & upper_mask ) >> i32_r_imm5 );
}
:sext i32_r_rz, i32_r_rx, i32_r_pcode, i32_r_imm5 is i32_op = 0b0001 & i32_r_sop = 0b010110 & i32_r_rz & i32_r_rx & i32_r_pcode & i32_r_imm5 & i32_ext {
    i32_r_rz = sext( ( i32_r_rx >> i32_r_pcode ) & 1 );
}
:sext i32_r_rz, i32_r_rx, i32_r_pcode, i32_r_imm5 is i32_op = 0b0001 & i32_r_sop = 0b010110 & i32_r_rz & i32_r_rx & i32_r_pcode & i32_r_imm5 {
    local upper_mask:4 = ( 1 << i32_r_pcode ) - 1;
    i32_r_rz = sext( ( i32_r_rx & upper_mask ) >> i32_r_imm5 );
}

# used i32_r_ry instead i32_r_rz - it's ok
:ins i32_r_ry, i32_r_rx, i32_bit_0509, i32_bit_0004 is i32_op = 0b0001 & i32_r_sop = 0b010111 & i32_r_ry & i32_r_rx & i32_bit_0509 & i32_bit_0004 {
    local size:4 = i32_bit_0509 + 1;
    local rx_mask:4 = ( 1 << size) - 1;
    local rx_value:4 = i32_r_rx & rx_mask;
    local rz_mask:4 = (( 1 << size) - 1 ) << i32_bit_0004;
    local rz_value:4 = i32_r_ry & ~rz_mask;
    i32_r_ry = rz_value | (rx_value << i32_bit_0004);
}

# compare Part
# cmpne/cmphs/cmplt
with : i32_op = 0b0001 {
    with : i32_r_sop = 0b000001 {
        :cmpne i32_r_rx, i32_r_ry is i32_r_pcode = 0b00100 & i32_r_rz = 0b00000 & i32_r_rx & i32_r_ry {
            psr_cf = (i32_r_rx != i32_r_ry);
        }
        :cmphs i32_r_rx, i32_r_ry is i32_r_pcode = 0b00001 & i32_r_rz = 0b00000 & i32_r_rx & i32_r_ry {
            psr_cf = (i32_r_rx >= i32_r_ry);
        }
        :cmplt i32_r_rx, i32_r_ry is i32_r_pcode = 0b00010 & i32_r_rz = 0b00000 & i32_r_rx & i32_r_ry {
            psr_cf = (i32_r_rx s< i32_r_ry);
        }
    }
}
# cmpnei/cmphsi/cmplti
with : i32_op = 0b1010 {
    :cmpnei i32_imm16_rx, i32_imm16_imm is i32_imm16_sop = 0b11010 & i32_imm16_rx & i32_imm16_imm {
        psr_cf = (i32_imm16_rx!=i32_imm16_imm);
    }
    :cmphsi i32_imm16_rx, oimm is i32_imm16_sop = 0b11000 & i32_imm16_rx & i32_imm16_imm [oimm = i32_imm16_imm+1;] {
        psr_cf = (i32_imm16_rx>=oimm);
    }
    :cmplti i32_imm16_rx, oimm is i32_imm16_sop = 0b11001 & i32_imm16_rx & i32_imm16_imm [oimm = i32_imm16_imm+1;] {
        psr_cf = (i32_imm16_rx s< oimm);
    }
}

# multiply-divide Part
with : i32_op = 0b0001 {
    :mult i32_r_rz, i32_r_rx, i32_r_ry is i32_r_sop = 0b100001 & i32_r_pcode = 0b00001 & i32_r_rz & i32_r_rx & i32_r_ry {
        i32_r_rz = i32_r_rx * i32_r_ry;
    }
    with : i32_r_sop = 0b100000 {
        :divs i32_r_rz, i32_r_rx, i32_r_ry is i32_r_pcode = 0b00010 & i32_r_rz & i32_r_rx & i32_r_ry {
            i32_r_rz = i32_r_rx s/ i32_r_ry;
        }
        :divu i32_r_rz, i32_r_rx, i32_r_ry is i32_r_pcode = 0b00001 & i32_r_rz & i32_r_rx & i32_r_ry {
            i32_r_rz = i32_r_rx / i32_r_ry;
        }
    }
    with : i32_r_sop = 0b100010 {
        :mulu i32_r_rx, i32_r_ry is i32_r_pcode = 0b00001 & i32_r_rz = 0b00000 & i32_r_rx & i32_r_ry {
            local tmp = i32_r_rx * i32_r_ry;
            lo = tmp:32;
            hi = tmp>>32;
            # should clear overflow bit , but where is it?
        }
        :mulua i32_r_rx, i32_r_ry is i32_r_pcode = 0b00010 & i32_r_rz = 0b00000 & i32_r_rx & i32_r_ry {
            local tmp = hi<<32 + lo + i32_r_rx * i32_r_ry;
            lo = tmp:32;
            hi = tmp>>32;
            # should set overflow bit , but where is it?
        }
        :mulus i32_r_rx, i32_r_ry is i32_r_pcode = 0b00100 & i32_r_rz = 0b00000 & i32_r_rx & i32_r_ry {
            local tmp = (hi<<32 + lo) - i32_r_rx * i32_r_ry;
            lo = tmp:32;
            hi = tmp>>32;
            # should set overflow bit , but where is it?
        }
    }
}

# miscellaneous operation Part
# bmaski Attention: When OIMM5 is 1-16, movi instruction will be executed.
:bmaski i32_r_rz, oimm is i32_op = 0b0001 & i32_r_rx = 0b00000 & i32_r_sop = 0b010100 & i32_r_pcode = 0b00001 & i32_r_rz & i32_r_imm5 [oimm = i32_r_imm5+1;] {
    local tmp:4 = (1 << oimm) - 1;
    i32_r_rz = tmp;
}
